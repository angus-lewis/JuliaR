qqplot(y=1:10)
qqnorm(y=1:10)
qqline()
? qqline
qqline(1:10)
? fluidRow
shiny::runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
install.packages("shinyalert")
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
library(shiny)
library(shinyWidgets)
library(devtools)
library(rcanvas) # devtools::install_github("daranzolin/rcanvas")
library(shinyalert)
set_canvas_token(
"7036~S5k5oh0CFz7Jh88wVixmONDnWtfI5Us0HaYfEXOOJCYkyHCm67mA4ZTcznitJGgG"
)
set_canvas_domain("https://myuni.adelaide.edu.au")
course_id <- 45165
###APIII2019 45361
###SPI2019S2 45165
### MATHIA2019S1 45373
users <- get_course_items(
course_id,
item = "students"
)
users <- data.frame(Name = users$sortable_name, ID = users$login_id)
users <- unique(users)
df <- data.frame(Name = NULL, ID = NULL)
getTableData <- function(selectednames) {
currentuserdata <- subset(
users,
Name %in% selectednames
)[,c('Name','ID')]
df <- rbind(df, currentuserdata)
return(df)
}
users
users$ID
rbind(users, c(Name = paste("Angus"),ID="a1627293"))
rbind(users, c(Name = as.factor(paste("Angus")),ID=as.factor("a1627293")))
rbind(users, data.frame(Name = paste("Angus"),ID="a1627293"))
runApp('Dropbox/R/Shiny/Dev')
newData()
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
? plotOutputput
? plotOutput
? *outputOptions
? *output
?renderDataTable
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
if (interactive()) {
# pass a callback function to DataTables using I()
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris,
options = list(
pageLength = 5,
initComplete = I("function(settings, json) {alert('Done.');}")
)
)
}
)
}
? uiOutput
? updateMultiInput
if (interactive()) {
library(shiny)
library(shinyWidgets)
fruits <- c("Banana", "Blueberry", "Cherry",
"Coconut", "Grapefruit", "Kiwi",
"Lemon", "Lime", "Mango", "Orange",
"Papaya")
ui <- fluidPage(
tags$h2("Multi update"),
multiInput(
inputId = "my_multi",
label = "Fruits :",
choices = fruits,
selected = "Banana",
width = "350px"
),
verbatimTextOutput(outputId = "res"),
selectInput(
inputId = "selected",
label = "Update selected:",
choices = fruits,
multiple = TRUE
),
textInput(inputId = "label", label = "Update label:")
)
server <- function(input, output, session) {
output$res <- renderPrint(input$my_multi)
observeEvent(input$selected, {
updateMultiInput(
session = session,
inputId = "my_multi",
selected = input$selected
)
})
observeEvent(input$label, {
updateMultiInput(
session = session,
inputId = "my_multi",
label = input$label
)
}, ignoreInit = TRUE)
}
shinyApp(ui, server)
}
runApp('Dropbox/R/Shiny/Dev')
ui <- fluidPage(
multiInput(
inputId = "id", label = "Fruits :",
choices = c("Banana", "Blueberry", "Cherry",
"Coconut", "Grapefruit", "Kiwi",
"Lemon", "Lime", "Mango", "Orange",
"Papaya"),
selected = "Banana", width = "400px",
options = list(
enable_search = FALSE,
non_selected_header = "Choose between:",
selected_header = "You have selected:"
)
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint({
input$id
})
}
shinyApp(ui = ui, server = server)
}
users$Name
typeof(users$Name)
as.character(user$Name)
as.character(users$Name)
runApp('Dropbox/R/Shiny/Dev')
fruits <- c("Banana", "Blueberry", "Cherry",
"Coconut", "Grapefruit", "Kiwi",
"Lemon", "Lime", "Mango", "Orange",
"Papaya")
ui <- fluidPage(
tags$h2("Multi update"),
multiInput(
inputId = "my_multi",
label = "Fruits :",
choices = fruits,
selected = "Banana",
width = "350px"
),
verbatimTextOutput(outputId = "res"),
selectInput(
inputId = "selected",
label = "Update selected:",
choices = fruits,
multiple = TRUE
),
textInput(inputId = "label", label = "Update label:")
)
server <- function(input, output, session) {
output$res <- renderPrint(input$my_multi)
observeEvent(input$selected, {
updateMultiInput(
session = session,
inputId = "my_multi",
selected = input$selected
)
})
observeEvent(input$label, {
updateMultiInput(
session = session,
inputId = "my_multi",
label = input$label
)
}, ignoreInit = TRUE)
}
shinyApp(ui, server)
}
runApp('Dropbox/R/Shiny/Dev')
runApp()
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
updateUsers <- function(first, last, ID) {
newUser <- data.frame(Name = paste(last, first, sep = ", "),
ID = ID)
users <- rbind(users,newUser)
return(users)
}
updateUsers("a","b","a1")
users <- updateUsers("a","b","a1")
users
? observeEvent
runApp('Dropbox/R/Shiny/Dev')
runApp()
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
users
updateUsers <- function(first, last, ID,users) {
newUser <- data.frame(Name = paste(last, first, sep = ", "),
ID = ID)
users <- rbind(users,newUser)
return(users)
}
users <- updateUsers("a","b","a1")
users <- updateUsers("a","b","a1", users)
users
users$Name
updateUsers <- function(first, last, ID,users) {
newUser <- data.frame(
Name = as.chatacter(paste(last, first, sep = ", ")),
ID = as.character(ID))
users <- rbind(users,newUser)
return(users)
}
users
users$Name
users$Name <- as.character(users$Name)
users
users$Name
users <- updateUsers("a","b","a1", users)
updateUsers <- function(first, last, ID,users) {
newUser <- data.frame(
Name = as.character(paste(last, first, sep = ", ")),
ID = as.character(ID))
users <- rbind(users,newUser)
return(users)
}
users <- updateUsers("a","b","a1a", users)
users
users$Name
runApp('Dropbox/R/Shiny/Dev')
runApp()
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp()
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp()
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
? reactiveValues
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp()
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
pwd
getwd()
runApp('Dropbox/R/Shiny/Dev')
? multiinput
multiInput
? multiInput
? tags$script()
? tags$script
? script
? htmltools::tags$script
htmltools::tags$script
htmltools::tags$div
? htmltools::tags$div
? tags
? tags
? multiInput
runApp('Dropbox/R/Shiny/Dev')
paste(users$Name,users$ID)
paste(users)
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev', host="0.0.0.0", port=5050)
? strsplit
users$Name
str.split(users$Name)
strsplit(users$Name)
strsplit(users$Name, split = ",")
paste(strsplit(users$Name, split = ",")[,1:2])
paste(strsplit(users$Name, split = ",")[1:2])
strsplit(users$Name[1])
strsplit(users$Name[1], split = ",")
strsplit(users$Name[1:3
], split = ",")
strsplit(users$Name[1:4
], split = ",")
paste(strsplit(users$Name[1:4], split = ","))
paste(strsplit(users$Name[4], split = ","))
strsplit(users$Name[4], split = ",")
strsplit(users$Name[4], split = ",")[1]
strsplit(users$Name[4], split = ",")[[1]]
strsplit(users$Name[4], split = ",")[[1]][1]
strsplit(users$Name[4], split = ",")[[1]][2]
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
runApp('Dropbox/R/Shiny/Dev')
? dbinom
1-0.75^5-0.5^5-0.75^5
?? Multinomial
for(y1 in 1:5){for(Y2 in 1:5){ for(y3 in 1:5){dmultinom(1,prob = c(0.25,0.5,0.25), size=5)
p <- 0
for(y1 in 1:5){
for(Y2 in 1:5){
for(y3 in 1:5){
p <- p + dmultinom(c(y1,y2,y3),prob = c(0.25,0.5,0.25), size=5)
}
}
}
p <- 0
for(y1 in 1:5){
for(Y2 in 1:5){
for(y3 in 1:5){
p <- p + dmultinom(c(y1,y2,y3),prob = c(0.25,0.5,0.25), size=5)
}
}
}
p <- 0
for(y1 in 1:5){
for(y2 in 1:5){
for(y3 in 1:5){
p <- p + dmultinom(c(y1,y2,y3),prob = c(0.25,0.5,0.25), size=5)
}
}
}
p <- 0
for(y1 in 1:5){
for(y2 in 1:5){
for(y3 in 1:5){
p <- p + dmultinom(c(y1,y2,y3),prob = c(0.25,0.5,0.25), size=5)
}
}
}
p <- 0
for(y1 in 1:5){
for(y2 in 1:5){
for(y3 in 1:5){
if(y1+y1+y3==5){
p <- p + dmultinom(c(y1,y2,y3),prob = c(0.25,0.5,0.25), size=5)
}
}
}
}
p <- 0
for(y1 in 1:5){
for(y2 in 1:5){
for(y3 in 1:5){
if((y1+y1+y3)==5){
p <- p + dmultinom(c(y1,y2,y3),prob = c(0.25,0.5,0.25), size=5)
}
}
}
}
p <- 0
for(y1 in 1:5){
for(y2 in 1:5){
for(y3 in 1:5){
if((y1+y1+y3)==5){
print(y1+y2+y3)
p <- p + dmultinom(c(y1,y2,y3),prob = c(0.25,0.5,0.25), size=5)
}
}
}
}
p <- 0
for(y1 in 1:5){
for(y2 in 1:5){
for(y3 in 1:5){
if((y1+y2+y3)==5){
p <- p + dmultinom(c(y1,y2,y3),prob = c(0.25,0.5,0.25), size=5)
}
}
}
}
p
121/256
0.5^5 + 0.75^5 + 0.5^5 - 0.25^5-0.25^5-0.5^5
0.5^5 + 0.75^5 + 0.75^5 - 0.25^5-0.25^5-0.5^5
q()
q()
dpois(x = 0, lambda = 7)
pexp(0.25,rate = 7)
dpois(x = 2, lambda = 7)
sum(dbinom(c(3,4,5,6,7,8),size = 10, prob = 0.8))
sum(dbinom(c(0,1,2,3,4,5,6,7,8),size = 10, prob = 0.8))
mean(rbinom(n=10000,size = 10,prob = 0.8)^2)
mean(rbinom(n=100000,size = 10,prob = 0.8)^2)
mean(rbinom(n=1000000,size = 10,prob = 0.8)^2)
P = matrix(data = c(0.2,0.1,0.7,0.1,0.5,0.2,0.3,0.1,0.6), nrow = 3)
P
P = t(P)
P
P^2
P%*%P
P
P = matrix(data = c(0.2,0.1,0.7,0.1,0.5,0.4,0.3,0.1,0.6), nrow = 3)
P%*%P
mean(1:6)
3.5*9
exp(-7)
P
P = t(P)
P%*%P
P
sqrt(8)/sqrt(17)
0.02/0.05
1/2qrt(8)
1/sqrt(8)
q()
setwd("~/Documents/JuliaR")
library(tidyverse)
library(tictoc)
tic("read data")
taxi <- bind_rows(read_csv("yellow_tripdata_2020-01.csv"),
read_csv("yellow_tripdata_2020-02.csv"),
read_csv("yellow_tripdata_2020-03.csv"),
read_csv("yellow_tripdata_2020-04.csv")
)
toc()
tic("summarise data")
taxi %>%
mutate(total_distance = passenger_count*trip_distance) %>%
select(total_distance, passenger_count, trip_distance) %>%
group_by(passenger_count) %>%
summarise(n = n(), total = sum(total_distance))
toc()
tic("summarise data")
taxi %>%
mutate(total_distance = passenger_count*trip_distance) %>%
select(total_distance, passenger_count, trip_distance) %>%
group_by(passenger_count) %>%
summarise(n = n(), total = sum(total_distance))
toc()
tic("summarise data")
taxi %>%
mutate(total_distance = passenger_count*trip_distance) %>%
select(total_distance, passenger_count, trip_distance) %>%
group_by(passenger_count) %>%
summarise(n = n(), total = sum(total_distance))
toc()
tic("summarise data")
taxi %>%
mutate(total_distance = passenger_count*trip_distance) %>%
select(total_distance, passenger_count, trip_distance) %>%
group_by(passenger_count) %>%
summarise(n = n(), total = sum(total_distance))
toc()
taxis
